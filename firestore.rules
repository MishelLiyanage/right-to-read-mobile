/**
 * Firestore Security Rules for Right to Read Analytics
 * 
 * These rules ensure:
 * 1. School-based data isolation
 * 2. Device authentication based on serial numbers  
 * 3. Read/write permissions for analytics data
 * 4. Data validation and sanitization
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isValidSchoolSerial(serial) {
      return serial is string && serial.size() > 0 && serial.size() <= 50;
    }
    
    function isValidBookId(bookId) {
      return bookId is number && bookId >= 1 && bookId <= 1000;
    }
    
    function isValidPageNumber(pageNumber) {
      return pageNumber is number && pageNumber >= 1 && pageNumber <= 1000;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp;
    }
    
    function isValidDuration(duration) {
      return duration is number && duration >= 0 && duration <= 3600000; // Max 1 hour per session
    }

    // School documents - only the school itself can read/write its data
    match /schools/{schoolSerial} {
      allow read, write: if isValidSchoolSerial(schoolSerial);
      
      // School info document
      match /info/school_info {
        allow read, write: if isValidSchoolSerial(schoolSerial);
        
        // Validate school info data structure
        allow write: if request.resource.data.keys().hasAll(['serialNumber', 'schoolName', 'lastActiveTime']) &&
                        request.resource.data.serialNumber == schoolSerial &&
                        isValidTimestamp(request.resource.data.lastActiveTime);
      }
      
      // Book analytics documents
      match /analytics/books/{bookId} {
        allow read, write: if isValidSchoolSerial(schoolSerial) && 
                             isValidBookId(int(bookId));
        
        // Validate book analytics data
        allow write: if request.resource.data.keys().hasAll(['bookId', 'bookTitle', 'totalActiveTime', 'sessionCount']) &&
                        request.resource.data.bookId == int(bookId) &&
                        request.resource.data.totalActiveTime is number &&
                        request.resource.data.sessionCount is number &&
                        request.resource.data.totalActiveTime >= 0 &&
                        request.resource.data.sessionCount >= 0;
      }
      
      // Page analytics documents  
      match /analytics/pages/{pageId} {
        allow read, write: if isValidSchoolSerial(schoolSerial);
        
        // Validate page analytics data
        allow write: if request.resource.data.keys().hasAll(['pageId', 'bookId', 'pageNumber', 'totalTime', 'sessionCount']) &&
                        request.resource.data.pageId == pageId &&
                        isValidBookId(request.resource.data.bookId) &&
                        isValidPageNumber(request.resource.data.pageNumber) &&
                        request.resource.data.totalTime is number &&
                        request.resource.data.sessionCount is number &&
                        request.resource.data.totalTime >= 0 &&
                        request.resource.data.sessionCount >= 0;
      }
      
      // Individual book and page session documents
      match /books/{bookId}/pages/{pageNumber}/sessions/{sessionId} {
        allow read, write: if isValidSchoolSerial(schoolSerial) && 
                             isValidBookId(int(bookId)) && 
                             isValidPageNumber(int(pageNumber));
        
        // Validate session data structure
        allow write: if request.resource.data.keys().hasAll(['sessionId', 'bookId', 'pageNumber', 'startTime', 'isActive']) &&
                        request.resource.data.sessionId == sessionId &&
                        request.resource.data.bookId == int(bookId) &&
                        request.resource.data.pageNumber == int(pageNumber) &&
                        isValidTimestamp(request.resource.data.startTime) &&
                        request.resource.data.isActive is bool;
        
        // Additional validation for completed sessions
        allow write: if !request.resource.data.isActive implies (
                        request.resource.data.keys().hasAll(['endTime', 'duration']) &&
                        isValidTimestamp(request.resource.data.endTime) &&
                        isValidDuration(request.resource.data.duration)
                      );
      }
      
      // Analytics summary documents
      match /analytics_summary/current {
        allow read, write: if isValidSchoolSerial(schoolSerial);
        
        // Validate summary data
        allow write: if request.resource.data.keys().hasAll(['totalBooks', 'totalActiveTime', 'totalSessions', 'lastUpdated']) &&
                        request.resource.data.totalBooks is number &&
                        request.resource.data.totalActiveTime is number &&
                        request.resource.data.totalSessions is number &&
                        isValidTimestamp(request.resource.data.lastUpdated);
      }
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

/**
 * Firestore Indexes for Performance
 * 
 * Create these composite indexes in the Firebase Console:
 * 
 * Collection: schools/{schoolSerial}/analytics/books
 * Fields: totalActiveTime (Descending), __name__ (Ascending)
 * 
 * Collection: schools/{schoolSerial}/analytics/pages  
 * Fields: lastAccessed (Descending), bookId (Ascending)
 * 
 * Collection Group: sessions
 * Fields: schoolSerial (Ascending), startTime (Descending)
 * 
 * Collection Group: sessions
 * Fields: schoolSerial (Ascending), bookId (Ascending), startTime (Descending)
 */